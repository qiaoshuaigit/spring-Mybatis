<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:context="http://www.springframework.org/schema/context"   
	xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="http://www.springframework.org/schema/beans   
    http://www.springframework.org/schema/beans/spring-beans-3.0.xsd   
    http://www.springframework.org/schema/tx   
    http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
    http://www.springframework.org/schema/context  
    http://www.springframework.org/schema/context/spring-context-3.0.xsd  
    http://www.springframework.org/schema/aop  
    http://www.springframework.org/schema/aop/spring-aop-3.0.xsd">
	<description>配置数据库xml文件</description>
	<!-- PropertyPlaceholderConfigurer是个bean工厂后置处理器的实现，也就是BeanFactoryPostProcessor接口的一个实现。PropertyPlaceholderConfigurer可以将上下文（配置文件）中的属性值放在另一个单独的标准java 
		Properties文件中去。在XML文件中用${key}替换指定的properties文件中的值。这样的话，只需要对properties文件进行修改，而不用对xml配置文件进行修改 -->
	<!-- 没弄明白和PropertiesFactoryBean的区别 -->
	<!-- 来自spring-bean包 -->
    <!-- <bean class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="properties" ref="dbConfig" />
	</bean>
	<context:property-placeholder location="WEB-INF/config/db.properties" file-encoding="utf-8">
	<bean id="utf-8" class="java.lang.String">
		<constructor-arg value="utf-8"></constructor-arg>
	</bean>
     <bean id="property" class="com.qs.web.fruit.model.PropertyData">
	</bean> 
	-->
	
	<context:property-placeholder location="/WEB-INF/config/db.properties" file-encoding="utf-8"/>
	
	<!-- Spring在第三方依赖包中包含了两个数据源的实现类包，其一是Apache的DBCP，其二是 C3P0。可以在Spring配置文件中利用这两者中任何一个配置数据源。 -->
	<!-- BasicDataSource提供了close()方法关闭数据源，所以必须设定destroy-method=”close”属性， 以便Spring容器关闭时，数据源能够正常关闭 -->
	<!-- 数据库连接配置 驱动程序来自jtds.jar包 -->
	<!-- why is "username" "password" not is "userName" "passWord" -->
	<!-- 要与BasicDataSource中的定义属性名称一样 -->
	<bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource">
		<property name="driverClassName" value="${datasource.driverClassName}" />
		<property name="url" value="${database.url}" />
		<property name="username" value="${database.username}" />
		<property name="password" value="${database.password}" />
	</bean>

	<!-- mybatis 管理sql的工厂 -->
	<!-- 来自mybatis-spring.jar整合包 -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<!-- configLocation，用于指明mybatis的XML配置文件的位置.mapperLocations,用于指明一组XML Mapper文件位置。是可选项  -->
		<!-- <property name="configLocation" value="classpath:SqlMapConfig.xml" /> -->
		<property name="mapperLocations">
			<list>
				<value>classpath:com/roiland/web/super/sqlMap/*.xml</value>
			</list>
		</property>
	</bean>
	<!-- 第二种方式 SqlSessionDaoSupport方式  Dao实现层需要继承此类 ，而此类需要一个Sqlsession（接口）
			需要提供一个Sqlsession实例 所以必须定义一个Sqlsession实现类SqlSessionTemplate
			如果不定义这个bean 报错的意识是找不到对应的实现类 -->
	<bean id="sqlSessionTemplate" class="org.mybatis.spring.SqlSessionTemplate">
      <constructor-arg index="0" ref="sqlSessionFactory" />
	</bean>

	<!-- 声明事务类 -->
	<bean id="transactionManager" 
        class="org.springframework.jdbc.datasource.DataSourceTransactionManager"> 
        <property name="dataSource" ref="dataSource" /> 
    </bean> 
    <!-- 1.标签方式
    <tx:advice id="userTxAdvice" transaction-manager="transactionManager"> 
        <tx:attributes> 
            <tx:method name="*" propagation="REQUIRED" read-only="false" 
                rollback-for="java.lang.Exception"/> 
        </tx:attributes> 
    </tx:advice>
    
    <aop:config> 
        <aop:pointcut id="pc" 
            expression="execution(* com.qs.web.fruit.service.*(..))" /> 
        <aop:advisor pointcut-ref="pc" advice-ref="userTxAdvice" /> 
    </aop:config>  -->
    
    <!-- 2.自动注解事务 -->
    <tx:annotation-driven transaction-manager="transactionManager"/>
  

</beans>